<?phpif ( ! defined( 'ABSPATH' ) ) {	exit; // Exit if accessed directly}use Twilio\Rest\Client;class POD_TWilio_Contact_Request_Handler {	/*	*	@private	*	current user	*	request sender	*/	private $_current_user;		/*	*	@private	*	contact request reciver user	*/	private $_request_user;		/*	*	@private	*	instance of global $wpdb for accessing database	*/	private $_db;		/*	*	@public	*	contact request details	*	@object	*/	public $contact;		/*	*	@public	*	check contact request exists between two users	*	@count of contacts between two users	*/	public $contact_exists;		/*	*	@public	*	contact status between two users	*/	public $contact_status;		/**	*	Constructor of this class	**/			public function __construct( $request_user_id, $current_user_id = null ){		global $wpdb;		$this->_db = $wpdb;					$this->_request_user = new POD_Twilio_User( $request_user_id );				if( ! $current_user_id ){			$this->_current_user = new POD_Twilio_User( get_current_user_id() );		}		else{			$this->_current_user = new POD_Twilio_User( $current_user_id );		}				$this->contact_exists = $this->contact_exists();		if( $this->contact_exists ) {			$this->contact = $this->get_contact();			$this->contact_status = $this->get_contact_status();		}	}		/*	*	@public	*	get contact details between two users	*	@return object	*/	public function get_contact(){		$sql =  "SELECT * FROM " . POD_TWILIO_CONTACT_LIST . " WHERE ( request_sender_id = " .$this->_current_user->_id ." AND request_receiver_id = " . $this->_request_user->_id . ") OR ( request_receiver_id = " . $this->_current_user->_id ." AND request_sender_id = " . $this->_request_user->_id . ")";		$contact = $this->_db->get_row( $sql );		return apply_filters( "pod_twilio_get_request_contact", $contact, $this );	}		/**	*	@public	*	check contact exists for given users	*	@return count of contacts between two users	*/	public function contact_exists(){		$sql = "SELECT COUNT(*) FROM " . POD_TWILIO_CONTACT_LIST . " WHERE ( request_sender_id = " .$this->_current_user->_id ." AND request_receiver_id = " . $this->_request_user->_id . ") OR ( request_receiver_id = " . $this->_current_user->_id ." AND request_sender_id = " . $this->_request_user->_id . ")";		$contact_exists = $this->_db->get_var( $sql );		return apply_filters( "pod_twilio_request_contact_exist", $contact_exists > 0, $this );	}		/*	*	@public	*	send contact requst to receiver user	*	request sender is current user	*	returns sent request status	*	@return array	*/	public function send_contact_request(){		$result = array();				if( ! $this->_current_user->has_twilio_activated ){			$result = array(				"status" 	=> "error",				"message" 	=> apply_filters( "pod_twilio_register_error_message_on_contact_request", esc_html__( "Error ! Please Register for private call first.", POD_TWILIO_TEXT_DOMAIN ), $this )			);		}		else if( ! $this->_request_user->has_twilio_activated ){			$result = array( 				"status" 	=> "error",				"message" 	=> apply_filters( "pod_twilio_receiver_register_error_message_on_contact_request", esc_html__( "Error ! This user is not available for private call.", POD_TWILIO_TEXT_DOMAIN ), $this )			);		}		else{						if( $this->contact_exists ){				if( $this->contact_status == "Deleted" ){					$update_data = array(						"request_accepted"			=> 0,						"request_rejected" 			=> 0,						"contact_removed" 			=> "NR",						"request_sender_id"			=> $this->_current_user->_id,						"request_receiver_id" 		=> $this->_request_user->_id,						"sender_caller_id_sid" 		=> null,						"receiver_caller_id_sid"	=> null					);										$where = array(						"contact_id" 				=> $this->contact->contact_id					);										if( $this->_db->update( POD_TWILIO_CONTACT_LIST, $update_data, $where ) ){						$result =  array ( 							"status" 				=> "success",							"message" 				=> apply_filters( "pod_twilio_contact_request_sent_success_message", esc_html__( "Contact Request Sent Successfully ! ", POD_TWILIO_TEXT_DOMAIN ), $this )						);												do_action( "pod_twilio_contact_request_sent", $this );					}					else{						$result = array( 							"status" 				=> "error",							"message" 				=> apply_filters( "pod_twilio_contact_exist_error_message_on_contact_request", esc_html__( "Error ! This user is already in your contact list.", POD_TWILIO_TEXT_DOMAIN ), $this )						);					}				}				else if( $this->contact_status == "Rejected" ){					$update_data = array(						"request_accepted" 			=> 0,						"request_rejected" 			=> 0,						"request_sender_id" 		=> $this->_current_user->_id,						"request_receiver_id" 		=> $this->_request_user->_id					);										$where = array(						"contact_id" 				=> $this->contact->contact_id					);										if( $this->_db->update( POD_TWILIO_CONTACT_LIST, $update_data, $where ) ){						$result =  array ( 							"status" 				=> "success",							"message" 				=> apply_filters( "pod_twilio_contact_request_sent_success_message", esc_html__( "Contact Request Sent Successfully ! ", POD_TWILIO_TEXT_DOMAIN ), $this )						);												do_action( "pod_twilio_contact_request_sent", $this );					}					else{						$result = array( 							"status" 				=> "error",							"message" 				=> apply_filters( "pod_twilio_contact_exist_error_message_on_contact_request", esc_html__( "Error ! This user is already in your contact list.", POD_TWILIO_TEXT_DOMAIN ), $this )						);					}				}								else{					$result =  array( 						"status" 					=> "error",						"message" 					=> $this->_db->last_error					);				}			}			else{				$insert_data = array(					"request_sender_id" 			=> $this->_current_user->_id,					"request_receiver_id" 			=> $this->_request_user->_id				);								if( $this->_db->insert( POD_TWILIO_CONTACT_LIST, $insert_data ) ){					$result =  array ( 						"status" 					=> "success",						"message" 					=> apply_filters( "pod_twilio_contact_request_sent_success_message", esc_html__( "Contact Request Sent Successfully ! ", POD_TWILIO_TEXT_DOMAIN ), $this )					);										do_action( "pod_twilio_contact_request_sent", $this );				}				else{					$result =  array( 						"status" 					=> "error",						"message" 					=> "DB Error: " . $this->_db->last_error					);				}			}		}				return apply_filters( "pod_twilio_send_contact_request", $result, $this );	}		/**	*	@public	*	get contact request status for given users	*	@return string	**/	public function get_contact_status(){			if( ! $this->contact_exists ){			return apply_filters( "pod_twilio_contact_does_not_exist_message", esc_html__( "Contact does not exist.", POD_TWILIO_TEXT_DOMAIN ) );		}				$request_accepted = $this->contact->request_accepted;		$request_rejected = $this->contact->request_rejected;		$contact_deleted = $this->contact->contact_removed != "NR";				if( $contact_deleted ){			$status = "Deleted";		}		else if( $request_accepted ){			if( ! $this->contact->sender_caller_id_sid || ! $this->contact->receiver_caller_id_sid ){				$status = "Verification Pending";			}			else{				$status = "In Contact";			}		}				else if( $request_rejected ){			$status = "Rejected";		}		else{			$status = "Pending";		}		return apply_filters( "pod_twilio_get_request_contact_status", $status, $this );	}		/**	*	@public	*	get contact request status if status is verification pending	*	@return string	**/	public function get_verification_status(){		if( $this->contact_status == "Verification Pending" ){			if( $this->_current_user->_id == $this->contact->request_sender_id ){				if( ! $this->contact->sender_caller_id_sid ){					$status = "User Verification Pending";				}				else if ( ! $this->contact->receiver_caller_id_sid ){					$status = "Contact Verification Pending";				}				else{					$status = "Verified";				}			}			else{				if ( ! $this->contact->receiver_caller_id_sid ){					$status = "User Verification Pending";				}				else if( ! $this->contact->sender_caller_id_sid ){					$status = "Contact Verification Pending";				}							else{					$status = "Verified";				}			}			}		else{			die( "Error: invalid contact status. Contact status needs to be 'Verification Pending' for function POD_TWilio_Contact_Request_Handler::get_verification_status()" );		}		return apply_filters( "pod_twilio_get_request_contact_verification_status", $status, $this->contact, $this->contact_status );	}		/*	*	@public	*	verify user contacts for caller id	*	@return array -> verification status array	*/	public function verify_contact_request(){		$result = array();		if( $this->contact_exists ){			$status = $this->contact_status;				switch( $status ){				case ( "Verification Pending" ):					//verify contacts					$verification_status = $this->get_verification_status();										switch( $verification_status ){						case( "User Verification Pending" ):							//verify user's contact to request user's twilio a/c												$client = new Client( $this->_request_user->account_sid, $this->_request_user->account_auth_token ); //request user twilio account														try {								$validationRequest = $client->validationRequests->create(									$this->_current_user->twilio_number,									array(										"friendlyName" 	=> $this->_current_user->get_user_name()									)								);																$result = array(									"status" 			=> "success",									"message" 			=> apply_filters( "pod_twilio_verification_success_message", __( "Enter this code in your phone: ", POD_TWILIO_TEXT_DOMAIN ) . $validationRequest->validationCode, $validationRequest, $this )								);							}							catch(Exception $e){								$result = array(									"status"			=> 'error',									"message" 			=> __( $e->getMessage(), POD_TWILIO_TEXT_DOMAIN )								);							}													break;						case( "Contact Verification Pending" ):							$result = array(								"status" 				=> "error",								"message" 				=> apply_filters( "pod_twilio_contact_verification_pending_message", __( "You already Verified. This user still needs to verify his/her number", POD_TWILIO_TEXT_DOMAIN ), $this )							);						break;																default:							$result = array(								"status" 				=> "error",								"message" 				=> __( "Unknown Error.", POD_TWILIO_TEXT_DOMAIN )							);						break;					}				break;								case( "Deleted" ):				//contact deleted					$result = array(						"status" 						=> "error",						"message" 						=> apply_filters( "pod_twilio_contact_deleted_message", __( "Contact is Deleted.", POD_TWILIO_TEXT_DOMAIN ), $this )					);				break;								case( "In Contact" ):				//alreay verified					$result = array(						"status" 						=> "error",						"message" 						=> apply_filters( "pod_twilio_already_verified_message", __( "Numbers are Already Verified.", POD_TWILIO_TEXT_DOMAIN ), $this )					);				break;								case( "Rejected" ):				//contact request rejected					$result = array(						"status" 						=> "error",						"message" 						=> apply_filters( "pod_twilio_user_rejected_contact_request_message", __( "User Rejected your contact request.", POD_TWILIO_TEXT_DOMAIN ), $this )					);				break;								default:					$result = array(						"status" 						=> "error",						"message" 						=> __( "Unknown error occured.", POD_TWILIO_TEXT_DOMAIN )					);				break;			}		}		else{			$result =  array (				"status" 								=> "error",				"message" 								=> apply_filters( "pod_twilio_contact_not_exist_message", __( "Error ! This contact is not in your contact list.", POD_TWILIO_TEXT_DOMAIN ), $this )			);		}				return apply_filters( "pod_twilio_verify_contact_request", $result, $this );	}		public function check_contact_verified(){		$client = new Client( $this->_request_user->account_sid, $this->_request_user->account_auth_token ); //request user twilio account				try{			$outgoingCallerIds = $client->outgoingCallerIds->read(															array(																"phoneNumber" => $this->_current_user->twilio_number															)													);											foreach( $outgoingCallerIds as $outgoingCallerId ){				if( $outgoingCallerId->phoneNumber == $this->_current_user->twilio_number ){					$caller_id_sid = $outgoingCallerId->sid;										if( $this->contact_exists ){						if( $this->_current_user->_id == $this->contact->request_receiver_id ){							$update_array = array(								"receiver_caller_id_sid" 	=> $caller_id_sid							);							$this->contact->receiver_caller_id_sid = $caller_id_sid;						}						else {							$update_array = array(								"sender_caller_id_sid" 		=> $caller_id_sid							);							$this->contact->sender_caller_id_sid = $caller_id_sid;						}												if( $this->_db->update( POD_TWILIO_CONTACT_LIST, $update_array, array( "contact_id" => $this->contact->contact_id ) )){							$this->contact = $this->get_contact();							$status = array( 								"status" 					=> "success",								"contact_status" 			=> $this->get_contact_status(),								"message" 					=> apply_filters( "pod_twilio_number_verification_success_message", __( "Number Verified", POD_TWILIO_TEXT_DOMAIN ), $this )							);						}						else{							$status = array( 								"status" 					=> "error",								"message" 					=> apply_filters( "pod_twilio_number_verification_db_error_message",$this->_db->last_error, $this )							);						}											}					else{						$status = array( 							"status" 						=> "error",							"message" 						=> apply_filters( "pod_twilio_number_verification_contact_not_exist_message",__( "Contact does not exist", POD_TWILIO_TEXT_DOMAIN ), $this )						);					}					break;				}				else{					$status = array( 						"status" 							=> "error",						"message" 							=> apply_filters( "pod_twilio_number_verification_error_message", __( "Number Verification failed.", POD_TWILIO_TEXT_DOMAIN ), $this )					);				}			}		}		catch( Exception $e ){			$status = array( 				"status" 									=> "error",				"message" 									=> apply_filters( "pod_twilio_number_verification_error_message_on_exception", __( $e->getMessage(), POD_TWILIO_TEXT_DOMAIN ), $this )			);		}		return $status;	}		/*	*	@public	*	accept/reject contact request	*	@param $reject - boolean -> set true to reject else accept	**/	public function accept_contact_request( $reject = false ){		if( $this->contact_exists && $this->contact_status == "Pending" ){			if( $this->contact->request_receiver_id ==  $this->_current_user->_id ){				if( $reject ){					$update_data = array(						"request_rejected" 	=> 1					);				}				else{					$update_data = array(						"request_accepted" 	=> 1					);				}								$where = array(					"contact_id" 			=> $this->contact->contact_id				);								if( $this->_db->update( POD_TWILIO_CONTACT_LIST, $update_data, $where ) ){					if( $reject ){						$message = apply_filters( "pod_twilio_contact_request_rejected_message", __( "Rejected", POD_TWILIO_TEXT_DOMAIN ), $this );						do_action( "pod_twilio_reject_contact_request", $this );					}					else{						$message = apply_filters( "pod_twilio_contact_request_accepted_message", __( "Accepted", POD_TWILIO_TEXT_DOMAIN ), $this );						do_action( "pod_twilio_accept_contact_request", $this );					}										$result =  array (						"status" 			=> "success",						"message" 			=> $message					);														}				else{					$result =  array (						"status" 			=> "error",						"message" 			=> "DB Error: ".$this->_db->last_error					);				}			}			else{				$result =  array (					"status" 				=> "error",					"message" 				=> apply_filters( "pod_twilio_request_not_set_to_current_user_message", __( "Error ! This request was not sent to you.", POD_TWILIO_TEXT_DOMAIN ), $this )				);			}		}		else{			$result =  array (				"status" 					=> "error",				"message" 					=> apply_filters( "pod_twilio_request_accepted_or_not_exist_message", __( "Error ! This request is already accepted or request does not exist.", POD_TWILIO_TEXT_DOMAIN ), $this )			);		}				return apply_filters( "pod_twilio_accept_contact_request", $result, $this );	}		/*	*	@public	*	delete user from contact list	**/	public function remove_user_from_contact(){		if( $this->contact_exists && $this->contact_status == "In Contact" ){			$request_user = new Client($this->_request_user->account_sid, $this->_request_user->account_auth_token);			$current_user =  new Client($this->_current_user->account_sid, $this->_current_user->account_auth_token);			if( $this->contact->request_receiver_id ==  $this->_current_user->_id ){				$receiver_phone_number_sid = $this->contact->receiver_caller_id_sid;				$sender_phone_number_sid = $this->contact->sender_caller_id_sid;				$request_user->outgoingCallerIds($receiver_phone_number_sid)->delete();				$current_user->outgoingCallerIds($sender_phone_number_sid)->delete();								$update_data = array(					"contact_removed" 			=> "RR",					"receiver_caller_id_sid" 	=> null,					"sender_caller_id_sid" 		=> null				);			}			else{								$receiver_phone_number_sid = $this->contact->receiver_caller_id_sid;				$sender_phone_number_sid = $this->contact->sender_caller_id_sid;				$request_user->outgoingCallerIds($sender_phone_number_sid)->delete();				$current_user->outgoingCallerIds($receiver_phone_number_sid)->delete();				$update_data = array(					"contact_removed" 			=> "SR",					"receiver_caller_id_sid" 	=> null,					"sender_caller_id_sid" 		=> null				);			}						$where = array(				"contact_id" 					=> $this->contact->contact_id			);						if( $this->_db->update( POD_TWILIO_CONTACT_LIST, $update_data, $where ) ){				$result =  array (					"status" 					=> "success",					"message" 					=> apply_filters( "pod_twilio_contact_removed_message", __( "Contact Removed Successfully.", POD_TWILIO_TEXT_DOMAIN ), $this )				);								do_action( "pod_twilio_remove_contact", $this );			}			else{				$result =  array (					"status" 					=> "error",					"message" 					=> "DB Error: ".$this->_db->last_error				);			}		}		else{			$result =  array (				"status" 						=> "error",				"message" 						=> apply_filters( "pod_twilio_contact_remove_error_message", __( "Error ! This contact is not in your contact list.", POD_TWILIO_TEXT_DOMAIN ), $this )			);		}				return apply_filters( "pod_twilio_remove_contact", $result, $this );	}}